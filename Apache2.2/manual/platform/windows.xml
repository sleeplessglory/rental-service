<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE manualpage SYSTEM "../style/manualpage.dtd">
<?xml-stylesheet type="text/xsl" href="../style/manual.en.xsl"?>
<!-- $LastChangedRevision: 1480918 $ -->

<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<manualpage metafile="windows.xml.meta">
  <parentdocument href="./">Platform Specific Notes</parentdocument>

  <title>Using Apache HTTP Server on Microsoft Windows</title>

  <summary>
    <p>This document explains how to install, configure and run
    Apache 2.2 under Microsoft Windows.  If you have questions after
    reviewing the documentation (and any event and error logs), you
    should consult the peer-supported 
    <a href="http://httpd.apache.org/userslist.html">users' mailing
    list</a>.</p>

    <p>This document assumes that you are installing a binary
    distribution of Apache. If you want to compile Apache yourself
    (possibly to help with development or tracking down bugs),
    see <a href="win_compiling.html">Compiling Apache for Microsoft
    Windows</a>.</p>
  </summary>

  <section id="req">
    <title>Operating System Requirements</title>

    <p>The primary Windows platform for running Apache 2.2 is Windows
    2000 or later.  The binary installer only works with the x86 family
    of processors, such as Intel and AMD processors.  Always obtain and
    install the current service pack to avoid operating system bugs.</p>

    <note>Running Apache on Windows 9x is ignored by the developers, and
    is strongly discouraged.  On Windows NT 4.0, installing Service
    Pack 6 is required.  Apache HTTP Server versions later than 2.2 will
    not run on any operating system earlier than Windows 2000.</note>
  </section>

  <section id="down">
    <title>Downloading Apache for Windows</title>

    <p>Information on the latest versions of Apache can be found on the
    web site of the Apache web server at
    <a href="http://httpd.apache.org/download.cgi">http://httpd.apache.org/download.cgi</a>.
    There you will find the current release, as well as more recent alpha
    or beta test versions, and a list of HTTP and FTP mirrors from which
    you can download the Apache web server. Please use a mirror near to
    you for a fast and reliable download.</p>

    <p>For Windows installations you should download the version of
    Apache for Windows with the <code>.msi</code> extension. This is a
    single Microsoft Installer file, which contains a ready-to-run
    build of Apache.  There is a separate <code>.zip</code> file,
    which contains only the source code, see the summary above.</p>
  </section>

  <section id="inst">
    <title>Installing Apache for Windows</title>

    <p>You need Microsoft Installer 2.0 or above for the installation
    to work.  For Windows NT 4.0 and 2000 refer to Microsoft's article
    <a href="http://support.microsoft.com/kb/292539/">KB 292539</a>.
    Windows XP and later do not require this update.  The Windows 98/ME
    installer engine appears to no longer be available from Microsoft,
    and these instructions no longer detail such prerequisites.</p>

    <p>Note that you cannot install two versions of Apache 2.2 on the
    same computer with the binary installer. You can, however, install
    a version of the 1.3 series <strong>and</strong> a version of the
    2.2 series on the same computer without problems. If you need to
    have two different 2.2 versions on the same computer, you have to
    <a href="win_compiling.html">compile and install Apache from the
    source</a>.</p>

    <p>Run the Apache <code>.msi</code> file you downloaded above. The
    installation will ask you for these things:</p>

    <ol>
      <li><p><strong>Network Domain.</strong> Enter the DNS domain in which
      your server is or will be registered in. For example, if your
      server's full DNS name is <code>server.mydomain.net</code>, you would
      type <code>mydomain.net</code> here.</p></li>

      <li><p><strong>Server Name.</strong> Your server's full DNS name.
      From the example above, you would type <code>server.mydomain.net</code>
      here.</p></li>

      <li><p><strong>Administrator's Email Address.</strong> Enter the
      server administrator's or webmaster's email address here. This
      address will be displayed along with error messages to the client
      by default.</p></li>

      <li><p><strong>For whom to install Apache</strong> Select <code>for
      All Users, on Port 80, as a Service - Recommended</code> if you'd
      like your new Apache to listen at port 80 for incoming traffic.
      It will run as a service (that is, Apache will run even if no one
      is logged in on the server at the moment) Select <code>only for
      the Current User, on Port 8080, when started Manually</code> if
      you'd like to install Apache for your personal experimenting or
      if you already have another WWW server running on port 80.</p></li>

      <li><p><strong>The installation type.</strong> Select <code>Typical</code>
      for everything except the source code and libraries for module
      development. With <code>Custom</code> you can specify what to
      install. A full install will require about 13 megabytes of free
      disk space. This does <em>not</em> include the size of your web
      site(s).</p></li>

      <li><p><strong>Where to install.</strong> The default path is
      <code>C:\Program Files\Apache Software Foundation</code>
      under which a directory called 
      <code>Apache2.2</code> will be created by default.</p></li>
    </ol>

    <p>During the installation, Apache will configure the files in the
    <code>conf</code> subdirectory to reflect the chosen installation
    directory. However, if any of the configuration files in this
    directory already exist, they will not be overwritten. Instead, the
    new copy of the corresponding file will be left with the extension
    <code>.default</code>. So, for example, if <code>conf\httpd.conf</code>
    already exists, it will be renamed as <code>conf\httpd.conf.default</code>.
    After the installation you should manually check to see what new
    settings are in the <code>.default</code> file, and if necessary,
    update your existing configuration file.</p>

    <p>Also, if you already have a file called <code>htdocs\index.html</code>,
    it will not be overwritten (and no <code>index.html.default</code>
    will be installed either). This means it should be safe to install
    Apache over an existing installation, although you would have to
    stop the existing running server before doing the installation, and
    then start the new one after the installation is finished.</p>

    <p>After installing Apache, you must edit the configuration files
    in the <code>conf</code> subdirectory as required. These files
    will be configured during the installation so that Apache is ready
    to be run from the directory it was installed into, with the
    documents server from the subdirectory <code>htdocs</code>. There
    are lots of other options which you should set before you really
    start using Apache. However, to get started quickly, the files
    should work as installed.</p>
  </section>

  <section id="advinst">
    <title>Advanced Installation Topics</title>

    <p>One feature of the installer, "Build Headers and Libraries", can be
    ignored by most users, but should be installed if compiling third party
    modules.  The "APR Iconv Code Pages" can similarly be omitted by most
    users, unless using <module>mod_charset_lite</module> or a third party
    module which relies on APR internationalization features.</p>

    <p>There are requests to ship a .zip file from time to time.  There is
    no point in the ASF consuming additional storage, mirroring and bandwidth
    for this purpose, because the .msi installer allows the installation
    artifacts to all be unpacked using the <code>msiexec /a</code> network
    installation option.  Using this command against any .msi will result
    in an exploded tree of all of the individual files and components.</p>

    <p>The installation options above can be customized by users familiar
    with msiexec.exe options and silent installation.  The actual installer
    sources are available in the httpd/httpd/win32-msi/ tree of the httpd
    project subversion respository.  For reference, some of the more common
    variables which may be modified are;</p>

    <ul>
      <li><code>AgreeToLicense</code> (toggle to "Yes")</li>
      <li><code>ALLUSERS</code> (choose between Null and "1")</li>
      <li><code>ApplicationUsers</code> (toggle to "OnlyCurrentUser")</li>
      <li><code>EXISTING_APACHE_SERVICE_PATH</code></li>
      <li><code>INSTALLDIR</code> (default "ProgramFilesFolder\Apache Software Foundation\Apache2.2\")</li>
      <li><code>INSTALLLEVEL</code> (default "100", refer to list below)</li>
      <li><code>RESOLVED_WINSOCK2</code> (toggle to "1")</li>
      <li><code>SERVERADMIN</code></li>
      <li><code>SERVERDOMAIN</code></li>
      <li><code>SERVERNAME</code></li>
      <li><code>SERVERPORT</code> (default "80")</li>
      <li><code>SERVERSSLPORT</code> (default "443")</li>
      <li><code>SERVICEINTERNALNAME</code> (default "Apache2.2", no spaces!)</li>
      <li><code>SERVICENAME</code> (default "Apache2.2", include spaces)</li>
      <li><code>SetupType</code> (default "Typical")</li>
    </ul>

    <p>The installation level of various features, which may be individually
    toggled, include;</p>

    <ul>
      <li>Apache (1, base Apache HTTP Server 2.2 feature)</li>
      <li>ApacheDocs (11, Apache Documentation)</li>
      <li>ApacheMonitoring (41, Apache Service Taskbar Icon)</li>
      <li>ApacheRuntime (1, Apache Runtime)</li>
      <li>BuildFiles (101, Build Headers and Libraries)</li>
      <li>Iconv (21, APR Iconv Code Pages)</li>
      <li>OpensslBin (31, OpenSSL Runtime)</li>
      <li>SslBin (41, Ssl Binaries)</li>
    </ul>


  </section>

  <section id="cust">
    <title>Customizing Apache for Windows</title>

    <p>Apache is configured by the files in the <code>conf</code>
    subdirectory. These are the same files used to configure the Unix
    version, but there are a few different directives for Apache on
    Windows. See the <a href="../mod/directives.html">directive index</a>
    for all the available directives.</p>

    <p>The main differences in Apache for Windows are:</p>
    <ul>
      <li><p>Because Apache for Windows is multithreaded, it does not
      use a separate process for each request, as Apache can on Unix.
      Instead there are usually only two Apache processes running: a
      parent process, and a child which handles the requests. Within
      the child process each request is handled by a separate thread.
      </p>

      <p>The process management directives are also different:</p>

      <p><directive module="mpm_common">MaxRequestsPerChild</directive>:
      Like the Unix directive, this controls how many requests (actually,
      connections) which a single child process will serve before exiting.
      However, unlike on Unix, a replacement process is not instantly
      available.  Use the default <code>MaxRequestsPerChild 0</code>,
      unless instructed to change the behavior to overcome a memory leak
      in third party modules or in-process applications.</p>

      <note type="warning"><strong>Warning: The server configuration
      file is reread when a new child process is started. If you have
      modified <code>httpd.conf</code>, the new child may not start or
      you may receive unexpected results.</strong></note>

      <p><directive module="mpm_common">ThreadsPerChild</directive>:
      This directive is new. It tells the server how many threads it
      should use. This is the maximum number of connections the server
      can handle at once, so be sure to set this number high enough for
      your site if you get a lot of hits. The recommended default is
      <code>ThreadsPerChild 150</code>, but this must be adjusted to
      reflect the greatest anticipated number of simultaneous
      connections to accept.</p></li>

      <li><p>The directives that accept filenames as arguments must use
      Windows filenames instead of Unix ones. However, because Apache
      may interpret backslashes as an "escape character" sequence, you
      should consistently use forward slashes in path names, not 
      backslashes.</p></li>

      <li><p>While filenames are generally case-insensitive on
      Windows, URLs are still treated internally as case-sensitive
      before they are mapped to the filesystem.  For example, the
      <directive module="core" type="section">Location</directive>,
      <directive module="mod_alias">Alias</directive>, and <directive
      module="mod_proxy">ProxyPass</directive> directives all use
      case-sensitive arguments.  For this reason, it is particularly
      important to use the <directive module="core"
      type="section">Directory</directive> directive when attempting
      to limit access to content in the filesystem, since this
      directive applies to any content in a directory, regardless of
      how it is accessed.  If you wish to assure that only lowercase
      is used in URLs, you can use something like:</p>

      <example>
      RewriteEngine On<br />
      RewriteMap lowercase int:tolower<br />
      RewriteCond %{REQUEST_URI} [A-Z]<br />
      RewriteRule (.*) ${lowercase:$1} [R,L]
      </example></li>

      <li><p>When running, Apache needs write access only to the logs
      directory and any configured cache directory tree.  Due to the
      issue of case insensitive and short 8.3 format names, Apache must
      validate all path names given.  This means that each directory
      which Apache evaluates, from the drive root up to the directory
      leaf, must have read, list and traverse directory permissions.
      If Apache2.2 is installed at C:\Program Files, then the root
      directory, Program Files and Apache2.2 must all be visible
      to Apache.</p></li>

      <li><p>Apache for Windows contains the ability to load modules at
      runtime, without recompiling the server. If Apache is compiled
      normally, it will install a number of optional modules in the
      <code>\Apache2.2\modules</code> directory. To activate these or
      other modules, the new <directive module="mod_so">LoadModule</directive>
      directive must be used. For example, to activate the status
      module, use the following (in addition to the status-activating
      directives in <code>access.conf</code>):</p>

      <example>
        LoadModule status_module modules/mod_status.so
      </example>

      <p>Information on <a href="../mod/mod_so.html#creating">creating
      loadable modules</a> is also available.</p></li>

      <li><p>Apache can also load ISAPI (Internet Server Application
      Programming Interface) extensions such as those used by Microsoft
      IIS and other Windows servers. <a href="../mod/mod_isapi.html">More
      information is available</a>. Note that Apache <strong>cannot</strong>
      load ISAPI Filters, and ISAPI Handlers with some Microsoft feature
      extensions will not work.</p></li>

      <li><p>When running CGI scripts, the method Apache uses to find
      the interpreter for the script is configurable using the
      <directive module="core">ScriptInterpreterSource</directive>
      directive.</p></li>

      <li><p>Since it is often difficult to manage files with names
      like <code>.htaccess</code> in Windows, you may find it useful to
      change the name of this per-directory configuration file using
      the <directive module="core">AccessFilename</directive>
      directive.</p></li>

      <li><p>Any errors during Apache startup are logged into the
      Windows event log when running on Windows NT. This mechanism
      acts as a backup for those situations where Apache is not yet
      prepared to use the <code>error.log</code> file. You can
      review the Windows Application Event Log by using the Event Viewer,
      e.g. Start - Settings - Control Panel - Administrative Tools
      - Event Viewer.</p></li>
    </ul>

  </section>

  <section id="winsvc">
    <title>Running Apache as a Service</title>

    <p>You can install Apache as a service automatically during the
    installation. If you chose to install for all users, the
    installation will create an Apache service for you. If you specify
    to install for yourself only, you can manually register Apache as a
    service after the installation. You have to be a member of the
    Administrators group for the service installation to succeed.</p>

    <p>Apache comes with a utility called the Apache Service Monitor.
    With it you can see and manage the state of all installed Apache
    services on any machine on your network. To be able to manage an
    Apache service with the monitor, you have to first install the
    service (either automatically via the installation or manually).
    </p>

    <p>You can install Apache as a Windows NT service as follows from
    the command prompt at the Apache <code>bin</code> subdirectory:</p>

    <example>
      httpd.exe -k install
    </example>

    <p>If you need to specify the name of the service you want to
    install, use the following command. You have to do this if you
    have several different service installations of Apache on your
    computer. If you specify a name during the install, you have to
    also specify it during any other -k operation.</p>

    <example>
      httpd.exe -k install -n "MyServiceName"
    </example>

    <p>If you need to have specifically named configuration files for
    different services, you must use this:</p>

    <example>
      httpd.exe -k install -n "MyServiceName" -f "c:\files\my.conf"
    </example>

    <p>If you use the first command without any special parameters except
    <code>-k install</code>, the service will be called <code>Apache2.2</code>
    and the configuration will be assumed to be <code>conf\httpd.conf</code>.
    </p>

    <p>Removing an Apache service is easy. Just use:</p>

    <example>
      httpd.exe -k uninstall
    </example>

    <p>The specific Apache service to be uninstalled can be specified by using:</p>

    <example>
      httpd.exe -k uninstall -n "MyServiceName"
    </example>

    <p>Normal starting, restarting and shutting down of an Apache
    service is usually done via the Apache Service Monitor, by using
    commands like <code>NET START Apache2.2</code> and <code>NET STOP
    Apache2.2</code> or via normal Windows service management. Before
    starting Apache as a service by any means, you should test the
    service's configuration file by using:</p>

    <example>
      httpd.exe -n "MyServiceName" -t
    </example>

    <p>You can control an Apache service by its command line switches,
    too. To start an installed Apache service you'll use this:</p>

    <example>
      httpd.exe -k start -n "MyServiceName"
    </example>

    <p>To stop an Apache service via the command line switches, use
    this:</p>

    <example>
      httpd.exe -k stop -n "MyServiceName"
    </example>

    <p>or</p>

    <example>
      httpd.exe -k shutdown -n "MyServiceName"
    </example>

    <p>You can also restart a running service and force it to reread
    its configuration file by using:</p>

    <example>
      httpd.exe -k restart -n "MyServiceName"
    </example>

    <p>By default, all Apache services are registered to run as the
    system user (the <code>LocalSystem</code> account). The
    <code>LocalSystem</code> account has no privileges to your network
    via any Windows-secured mechanism, including the file system, named
    pipes, DCOM, or secure RPC. It has, however, wide privileges locally.
    </p>

    <note type="warning"><strong>Never grant any network privileges to
    the <code>LocalSystem</code> account! If you need Apache to be able
    to access network resources, create a separate account for Apache as
    noted below.</strong></note>

    <p>It is recommended that users create a separate account for running
    Apache service(s). If you have to access network resources via Apache,
    this is required.</p>

    <ol>
      <li>Create a normal domain user account, and be sure to
      memorize its password.</li>

      <li>Grant the newly-created user a privilege of <code>Log on
      as a service</code> and <code>Act as part of the operating
      system</code>. On Windows NT 4.0 these privileges are granted via
      User Manager for Domains, but on Windows 2000 and XP you probably
      want to use Group Policy for propagating these settings. You can
      also manually set these via the Local Security Policy MMC snap-in.
      </li>

      <li>Confirm that the created account is a member of the Users
      group.</li>

      <li>Grant the account read and execute (RX) rights to all document
      and script folders (<code>htdocs</code> and <code>cgi-bin</code>
      for example).</li>

      <li>Grant the account change (RWXD) rights to the
      Apache <code>logs</code> directory.</li>

      <li>Grant the account read and execute (RX) rights to the
      <code>httpd.exe</code> binary executable.</li>
    </ol>

    <note>It is usually a good practice to grant the user the Apache
    service runs as read and execute (RX) access to the whole Apache2.2
    directory, except the <code>logs</code> subdirectory, where the
    user has to have at least change (RWXD) rights.</note>

    <p>If you allow the account to log in as a user and as a service,
    then you can log on with that account and test that the account has
    the privileges to execute the scripts, read the web pages, and that
    you can start Apache in a console window. If this works, and you
    have followed the steps above, Apache should execute as a service
    with no problems.</p>

    <note><strong>Error code 2186</strong> is a good indication that
    you need to review the "Log On As" configuration for the service,
    since Apache cannot access a required network resource. Also, pay
    close attention to the privileges of the user Apache is
    configured to run as.</note>

    <p>When starting Apache as a service you may encounter an error
    message from the Windows Service Control Manager. For example,
    if you try to start Apache by using the Services applet in the
    Windows Control Panel, you may get the following message:</p>

    <example>
      Could not start the Apache2.2 service on \\COMPUTER <br />
      Error 1067; The process terminated unexpectedly.
    </example>

    <p>You will get this generic error if there is any problem with
    starting the Apache service. In order to see what is really causing
    the problem you should follow the instructions for Running Apache
    for Windows from the Command Prompt.</p>

    <p>If you are having problems with the service, it is suggested
    you follow the instructions below to try starting httpd.exe from
    a console window, and work out the errors before struggling to
    start it as a service again.</p>
  </section>

  <section id="wincons">
    <title>Running Apache as a Console Application</title>

    <p>Running Apache as a service is usually the recommended way to
    use it, but it is sometimes easier to work from the command line
    (on Windows 9x running Apache from the command line is the
    recommended way due to the lack of reliable service support.)</p>

    <p>To run Apache from the command line as a console application,
    use the following command:</p>

    <example>
      httpd.exe
    </example>

    <p>Apache will execute, and will remain running until it is stopped
    by pressing Control-C.</p>

    <p>You can also run Apache via the shortcut Start Apache in Console
    placed to <code>Start Menu --&gt; Programs --&gt; Apache HTTP Server
    2.2.xx --&gt; Control Apache Server</code> during the installation.
    This will open a console window and start Apache inside it. If you
    don't have Apache installed as a service, the window will remain
    visible until you stop Apache by pressing Control-C in the console
    window where Apache is running in. The server will exit in a few
    seconds. However, if you do have Apache installed as a service, the
    shortcut starts the service. If the Apache service is running
    already, the shortcut doesn't do anything.</p>

    <p>If Apache is running as a service, you can tell it to stop by opening another console
    window and entering:</p>

    <example>
      httpd.exe -k shutdown
    </example>

    <p>Running as a service should be preferred over running in a
    console window because this lets Apache end any current operations
    and clean up gracefully.</p>

    <p>But if the server is running in a console window, you can
    only stop it by pressing Control-C in the same window.</p>

    <p>You can also tell Apache to restart. This forces it to reread
    the configuration file. Any operations in progress are allowed to
    complete without interruption. To restart Apache, either press
    Control-Break in the console window you used for starting Apache,
    or enter</p>

    <example>
      httpd.exe -k restart
    </example>

    <p>if the server is running as a service.</p>

    <note>Note for people familiar with the Unix version of Apache:
    these commands provide a Windows equivalent to <code>kill -TERM
    <em>pid</em></code> and <code>kill -USR1 <em>pid</em></code>. The
    command line option used, <code>-k</code>, was chosen as a reminder
    of the <code>kill</code> command used on Unix.</note>

    <p>If the Apache console window closes immediately or unexpectedly
    after startup, open the Command Prompt from the Start Menu --&gt;
    Programs. Change to the folder to which you installed Apache, type
    the command <code>httpd.exe</code>, and read the error message. Then
    change to the logs folder, and review the <code>error.log</code>
    file for configuration mistakes. If you accepted the defaults when
    you installed Apache, the commands would be:</p>

    <example>
      c: <br />
      cd "\Program Files\Apache Software Foundation\Apache2.2\bin" <br />
      httpd.exe
    </example>

    <p>Then wait for Apache to stop, or press Control-C. Then enter the
    following:</p>

    <example>
      cd ..\logs <br />
      more &lt; error.log
    </example>

    <p>When working with Apache it is important to know how it will
    find the configuration file. You can specify a configuration file
    on the command line in two ways:</p>

    <ul>
      <li><p><code>-f</code> specifies an absolute or relative path to
      a particular configuration file:</p>

      <example>
        httpd.exe -f "c:\my server files\anotherconfig.conf"
      </example>

      <p>or</p>

      <example>
        httpd.exe -f files\anotherconfig.conf
      </example></li>

      <li><p><code>-n</code> specifies the installed Apache service
      whose configuration file is to be used:</p>

      <example>
        httpd.exe -n "MyServiceName"
      </example>
      </li>
    </ul>

    <p>In both of these cases, the proper
    <directive module="core">ServerRoot</directive> should be set in
    the configuration file.</p>

    <p>If you don't specify a configuration file with <code>-f</code>
    or <code>-n</code>, Apache will use the file name compiled into the
    server, such as <code>conf\httpd.conf</code>. This built-in path
    is relative to the installation directory. You can verify the compiled
    file name from a value labelled as <code>SERVER_CONFIG_FILE</code> when
    invoking Apache with the <code>-V</code> switch, like this:</p>

    <example>
      httpd.exe -V
    </example>

    <p>Apache will then try to determine its <directive module="core"
    >ServerRoot</directive> by trying the following, in this order:</p>

    <ol>
      <li>A <directive module="core">ServerRoot</directive> directive
      via the <code>-C</code> command line switch.</li>

      <li>The <code>-d</code> switch on the command line.</li>

      <li>Current working directory.</li>

      <li>A registry entry which was created if you did a binary
      installation.</li>

      <li>The server root compiled into the server. This is <code>
      /apache</code> by default, you can verify it by using <code>
      httpd.exe -V</code> and looking for a value labelled as
      <code>HTTPD_ROOT</code>.</li>
    </ol>

    <p>During the installation, a version-specific registry key is
    created in the Windows registry. The location of this key depends
    on the type of the installation. If you chose to install Apache
    for all users, the key is located under the
    <code>HKEY_LOCAL_MACHINE</code> hive, like this (the version
    numbers will of course vary between different versions of Apache:
    </p>

    <example>
      HKEY_LOCAL_MACHINE\SOFTWARE\Apache Software Foundation\Apache\2.2.2
    </example>

    <p>Correspondingly, if you chose to install Apache for the current
    user only, the key is located under the <code>HKEY_CURRENT_USER</code>
    hive, the contents of which are dependent of the user currently
    logged on:</p>

    <example>
      HKEY_CURRENT_USER\SOFTWARE\Apache Software Foundation\Apache\2.2.2
    </example>

    <p>This key is compiled into the server and can enable you to test
    new versions without affecting the current version. Of course, you
    must take care not to install the new version in the same
    directory as another version.</p>

    <p>If you did not do a binary install, Apache will in some
    scenarios complain about the missing registry key. This warning can
    be ignored if the server was otherwise able to find its
    configuration file.</p>

    <p>The value of this key is the
    <directive module="core">ServerRoot</directive> directory which
    contains the <code>conf</code> subdirectory. When Apache starts it
    reads the <code>httpd.conf</code> file from that directory. If
    this file contains a <directive module="core">ServerRoot</directive>
    directive which contains a different directory from the one
    obtained from the registry key above, Apache will forget the
    registry key and use the directory from the configuration file. If
    you copy the Apache directory or configuration files to a new
    location it is vital that you update the
    <directive module="core">ServerRoot</directive> directive in the
    <code>httpd.conf</code> file to reflect the new location.</p>
  </section>

  <section id="test">
    <title>Testing the Installation</title>

    <p>After starting Apache (either in a console window or as a
    service) it will be listening on port 80 (unless you changed the
    <directive module="mpm_common">Listen</directive> directive in the
    configuration files or installed Apache only for the current user).
    To connect to the server and access the default page, launch a
    browser and enter this URL:</p>

    <example>
      http://localhost/
    </example>

    <p>Apache should respond with a welcome page and you should see
    "It Works!". If nothing happens or you get an error, look in the
    <code>error.log</code> file in the <code>logs</code> subdirectory.
    If your host is not connected to the net, or if you have serious
    problems with your DNS (Domain Name Service) configuration, you
    may have to use this URL:</p>

    <example>
      http://127.0.0.1/
    </example>

    <p>If you happen to be running Apache on an alternate port, you
    need to explicitly put that in the URL:</p>

    <example>
      http://127.0.0.1:8080/
    </example>

    <p>Once your basic installation is working, you should configure it
    properly by editing the files in the <code>conf</code> subdirectory.
    Again, if you change the configuration of the Windows NT service
    for Apache, first attempt to start it from the command line to
    make sure that the service starts with no errors.</p>

    <p>Because Apache <strong>cannot</strong> share the same port with
    another TCP/IP application, you may need to stop, uninstall or reconfigure
    certain other services before running Apache. These conflicting
    services include other WWW servers, some firewall implementations,
    and even some client applications (such as Skype) which will use port
    80 to attempt to bypass firewall issues.</p>
  </section>

  <section id="windrivemap">
    <title>Configuring Access to Network Resources</title>

  <p>Access to files over the network can be specified using two
  mechanisms provided by Windows:</p>

  <dl>
    <dt>Mapped drive letters</dt>
    <dd>e.g., <code>Alias /images/ Z:/</code></dd>

    <dt>UNC paths</dt>
    <dd>e.g., <code>Alias /images/ //imagehost/www/images/</code></dd>
  </dl>

  <p>Mapped drive letters allow the administrator to maintain the
  mapping to a specific machine and path outside of the Apache httpd
  configuration.  However, these mappings are associated only with
  interactive sessions and are not directly available to Apache httpd
  when it is started as a service.  <strong>Use only UNC paths for
  network resources in httpd.conf</strong> so that the resources can
  be accessed consistently regardless of how Apache httpd is started.
  (Arcane and error prone procedures may work around the restriction
  on mapped drive letters, but this is not recommended.)</p>

  <example><title>Example DocumentRoot with UNC path</title>
  DocumentRoot //dochost/www/html/
  </example>

  <example><title>Example DocumentRoot with IP address in UNC path</title>
  DocumentRoot //192.168.1.50/docs/<br />
  </example>

  <example><title>Example Alias and corresponding Directory with UNC path</title>
  Alias /images/ //imagehost/www/images/<br />
  <br />
  &lt;Directory //imagehost/www/images/&gt;<br />
  ...<br />
  &lt;Directory&gt;<br />
  </example>

  <p>When running Apache httpd as a service, you must create a
  separate account in order to access network resources, as described
  above.</p>
  </section>

</manualpage>
